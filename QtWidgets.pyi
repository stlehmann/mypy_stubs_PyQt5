from typing import List, Optional, overload, Callable, Union, Any
from .QtCore import QObject, pyqtSignal, Qt, QAbstractItemModel, QSize
from .QtGui import QPaintDevice, QIcon, QKeySequence, QGuiApplication, QTextDocument

class QApplication(QGuiApplication): ...

class QWidget(QObject):
    def __init__(
        self, parent: Optional[QWidget] = ..., flags: Optional[int] = ...
    ) -> None: ...
    def setLayout(self, layout: QLayout) -> None: ...
    def close(self) -> bool: ...
    def setVisible(self, visible: bool) -> None: ...
    def restoreGeometry(self, geometry: bytes) -> None: ...
    def saveGeometry(self) -> bytes: ...
    def show(self) -> None: ...
    @overload
    def setMinimumSize(self, minw: int, minh: int) -> None: ...
    @overload
    def setMinimumSize(self, size: QSize) -> None: ...
    def setMinimumHeight(self, minh: int) -> None: ...
    def minimumHeight(self) -> int: ...

class QDialog(QWidget, QPaintDevice):
    def accept(self) -> None: ...
    def reject(self) -> None: ...
    def setModal(self, modal: bool) -> None: ...

class QDialogButtonBox(QWidget):
    class StandardButton(int): ...
    Ok: StandardButton
    Cancel: StandardButton
    Close: StandardButton

    accepted: pyqtSignal
    rejected: pyqtSignal
    clicked: pyqtSignal

    @overload
    def __init__(self, orientation: Qt.Orientation, parent: Optional[QWidget]) -> None: ...
    @overload
    def __init__(
        self,
        buttons: Union[StandardButton, int],
        parent: Optional[QWidget] = ...,
    ) -> None: ...
    @overload
    def __init__(self, buttons: Union[StandardButton, int], orientation: Qt.Orientation, parent: Optional[QWidget] = ...) -> None: ...

class QDockWidget(QWidget):
    @overload
    def __init__(self, title: str, parent: QWidget = ..., flags: int = ...) -> None: ...
    @overload
    def __init__(self, parent: QWidget = ..., flags: int = ...) -> None: ...
    def setWidget(self, widget: QWidget) -> None: ...
    def toggleViewAction(self) -> QAction: ...

class QLabel(QFrame):
    @overload
    def __init__(
        self, parent: Optional[QWidget] = ..., flags: Optional[int] = ...
    ) -> None: ...
    @overload
    def __init__(
        self, text: str, parent: Optional[QWidget] = ..., flags: Optional[int] = ...
    ) -> None: ...
    def setText(self, text: str) -> None: ...
    def setBuddy(self, buddy: QWidget) -> None: ...

class QMainWindow(QWidget):
    def setMenuBar(self, menuBar: QMenuBar) -> None: ...
    def setStatusBar(self, statusbar: QStatusBar) -> None: ...
    def addDockWidget(
        self, area: Qt.DockWidgetArea, dockwidget: QDockWidget
    ) -> None: ...
    def setCentralWidget(self, widget: QWidget) -> None: ...
    def restoreState(self, state: bytes, version: int = ...) -> None: ...
    def saveState(self) -> bytes: ...

class QMenuBar(QWidget):
    @overload
    def addMenu(self, menu: QMenu) -> QAction: ...
    @overload
    def addMenu(self, title: str) -> QMenu: ...
    @overload
    def addMenu(self, icon: QIcon, title: str) -> QMenu: ...

class QStatusBar(QWidget):
    def addWidget(self, widget: QWidget, stretch: int = ...) -> None: ...

class QTabWidget(QWidget):
    @overload
    def addTab(self, page: QWidget, label: str) -> int: ...
    @overload
    def addTab(self, page: QWidget, icon: QIcon, label: str) -> int: ...

class QLayoutItem: ...

class QLayout(QObject, QLayoutItem):
    def addWidget(self, w: QWidget) -> None: ...

class QBoxLayout(QLayout):
    def addWidget(
        self, widget: QWidget, stretch: int = ..., alignment: Qt.Alignment = ...
    ) -> None: ...

class QVBoxLayout(QBoxLayout): ...

class QMenu(QWidget):
    @overload
    def addAction(str, text: str) -> QAction: ...
    @overload
    def addAction(self, icon: QIcon, text: str) -> QAction: ...
    @overload
    def addAction(
        self, text: str, receiver: QObject, member: str, shortcut: QKeySequence = ...
    ) -> QAction: ...
    @overload
    def addAction(
        self,
        icon: QIcon,
        text: str,
        receiver: QObject,
        member: str,
        shortcut: QKeySequence = ...,
    ) -> QAction: ...
    @overload
    def addAction(
        self, text: str, receiver: QObject, method: Callable, shortcut: QKeySequence
    ) -> QAction: ...
    @overload
    def addAction(self, action: QAction) -> QAction: ...
    def addSeparator(self) -> None: ...

class QAction(QObject):

    triggered: pyqtSignal
    @overload
    def __init__(self, text: str, parent: QObject = ...) -> None: ...
    @overload
    def __init__(self, icon: QIcon, text: str, parent: QObject = ...) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def setEnabled(self, enabled: bool) -> None: ...
    def setCheckable(self, checkable: bool) -> None: ...
    def setShortcut(self, shortcut: Union[QKeySequence, str]) -> None: ...
    def setToolTip(self, tip: str) -> None: ...
    def setStatusTip(self, statusTip: str) -> None: ...
    def setIcon(self, icon: QIcon) -> None: ...

class QComboBox(QWidget):
    @overload
    def addItem(self, text: str, userData: Any = ...) -> None: ...
    @overload
    def addItem(self, icon: QIcon, text: str, userData: Any = ...) -> None: ...
    def addItems(self, texts: List[str]) -> None: ...
    def findData(
        self, data: Any, role: int = ..., flags: Qt.MatchFlags = ...
    ) -> int: ...
    def setCurrentIndex(self, index: int) -> None: ...
    def currentData(self, role: int = ...) -> Any: ...

class QGridLayout(QLayout):
    @overload  # type: ignore  # silence Liskov violation
    def addWidget(
        self, widget: QWidget, row: int, column: int, alignment: Qt.Alignment = ...
    ) -> None: ...
    @overload
    def addWidget(
        self,
        widget: QWidget,
        fromRow: int,
        fromColumn: int,
        rowSpan: int,
        columnSpan: int,
        alignment: Qt.Alignment = ...,
    ) -> None: ...
    def setColumnStretch(self, column: int, stretch: int) -> None: ...

class QMessageBox(QDialog):
    class StandardButton(int): ...
    Ok: StandardButton
    Open: StandardButton
    Save: StandardButton
    Cancel: StandardButton
    Close: StandardButton
    Discard: StandardButton
    Apply: StandardButton
    Reset: StandardButton
    RestoreDefaults: StandardButton
    Help: StandardButton
    SaveAll: StandardButton
    Yes: StandardButton
    YesToAll: StandardButton
    No: StandardButton
    NoToAll: StandardButton
    Abort: StandardButton
    Retry: StandardButton
    Ignore: StandardButton
    NoButton: StandardButton
    def critical(
        parent: QWidget,
        title: str,
        text: str,
        buttons: QMessageBox.StandardButton = ...,
        defaultButton: QMessageBox.StandardButton = ...,
    ) -> QMessageBox.StandardButton: ...


class QFrame(QWidget):
    class Shape(int):...
    NoFrame: Shape
    Box: Shape
    Panel: Shape
    StyledPanel: Shape
    HLine: Shape
    VLine: Shape
    WinPanel: Shape
    class Shadow(int): ...
    Plain: Shadow
    Raised: Shadow
    Sunken: Shadow

    def setFrameStyle(self, style: Union[Shape, Shadow, int]) -> None: ...

class QAbstractSlider(QWidget):
    def setValue(self, value: int) -> None: ...
    def value(self) -> int: ...
    def setMaximum(self, maximum: int) -> None: ...
    def maximum(self) -> int: ...

class QScrollBar(QAbstractSlider): ...

class QAbstractScrollArea(QFrame):
    def verticalScrollBar(self) -> QScrollBar: ...

class QAbstractItemView(QAbstractScrollArea):
    def setModel(self, model: QAbstractItemModel) -> None: ...

class QTreeView(QAbstractItemView): ...

class QTextEdit(QAbstractScrollArea):
    def document(self) -> QTextDocument: ...
    def insertHtml(self, text: str) -> None: ...
    def clear(self) -> None: ...

class QLineEdit(QWidget):
    returnPressed: pyqtSignal
    def text(self) -> str: ...
    def setText(self, text: str) -> None: ...

class QAbstractButton(QWidget):
    clicked: pyqtSignal
    pressed: pyqtSignal
    released: pyqtSignal
    toggled: pyqtSignal

class QPushButton(QAbstractButton):
    def __init__(self, text: str, parent: Optional[QWidget] = ...) -> None: ...

class QAbstractSpinBox(QWidget): ...

class QDoubleSpinBox(QAbstractSpinBox): ...

class QGroupBox(QWidget): ...

class QHBoxLayout(QBoxLayout): ...
