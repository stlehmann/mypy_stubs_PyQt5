from typing import Callable, Any, Type, List, Optional


def pyqtRemoveInputHook() -> None: ...


class Qt:
    class Alignment(int): ...
    class DockWidgetArea(int): ...
    BottomDockWidgetArea: DockWidgetArea

    class MatchFlags(int): ...
    class ItemDataRoll(int): ...
    DisplayRole: ItemDataRoll
    DecorationRole: ItemDataRoll
    EditRole: ItemDataRoll
    ToolTipRole: ItemDataRoll
    StatusTipRole: ItemDataRoll
    WhatsThisRole: ItemDataRoll
    SizeHintRole: ItemDataRoll

    class Orientation(int): ...
    Horizontal: Orientation
    Vertical: Orientation
    class ImageConversionFlag(int): ...
class QObject:
    def __init__(self, parent: Optional[QObject] = ...) -> None: ...
    def tr(self, sourceText: str) -> str: ...
    def setObjectName(self, objectname: str) -> None: ...

class pyqtSignal:
    def __init__(self, *types: type, name: str = ..., revision: int = ..., arguments: List[str] = ...) -> None: ...
    def connect(self, slot: Callable) -> None: ...
    def emit(self, *args: Any) -> None: ...

class QEvent:
    def accept(self) -> None: ...
    def ignore(self) -> None: ...

class QSettings(QObject):
    def value(self, key: str, defaultValue: Any = ..., type: Type = ...) -> Any: ...
    def setValue(self, key: str, value: Any) -> None: ...

class QLocale:
    @staticmethod
    def system() -> QLocale: ...
    def name(self) -> str: ...

class QTranslator(QObject):
    def load(self, filename: str, directory: str = ..., search_delimiters: str = ..., suffix: str = ...) -> bool: ...


class QCoreApplication(QObject):
    def __init__(self, argv: List[str]) -> None: ...

    @staticmethod
    def applicationName() -> str: ...
    @staticmethod
    def setApplicationName(application: str) -> None: ...
    @staticmethod
    def organizationName() -> str: ...
    @staticmethod
    def setOrganizationName(orgName: str) -> None: ...
    @staticmethod
    def applicationVersion() -> str: ...
    @staticmethod
    def setApplicationVersion(version: str) -> None: ...

    def installTranslator(self, translationFile: QTranslator) -> bool: ...
    def removeTranslator(self, translationFile: QTranslator) -> bool: ...

    def exec(self) -> int: ...
    def exec_(self) -> int: ...


class QAbstractItemModel(QObject): ...

class QAbstractTableModel(QAbstractItemModel): ...

class QModelIndex:

    def isValid(self) -> bool: ...
    def row(self) -> int: ...
    def column(self) -> int: ...
    def parnet(self) -> QModelIndex: ...

class QSize: ...
